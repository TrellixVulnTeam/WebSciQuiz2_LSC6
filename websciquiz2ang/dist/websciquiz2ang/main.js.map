{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/footer/footer.component.ts","./src/app/footer/footer.component.html","./src/app/services/covid.service.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","<app-header></app-header>\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-lg-6 text-right\">\n      <mat-form-field>\n        <mat-label>Country</mat-label>\n        <mat-select (selectionChange)=\"getCountry($event.value)\" style=\"text-align: center;\">\n          <mat-option *ngFor=\"let country of countries\" value={{country.Slug}}>\n            {{country.Country}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n\n    <div class=\"col-lg-6\">\n      <button mat-button (click)=\"getData()\" >Get Coronavirus Case Information</button>\n    </div>\n  </div>\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title *ngIf = \"databool;\"><h1 class=\"col-lg-12\">As of {{currentTime}} <span class=\"col-lg-12\" style=\"text-align: center;\">There are:</span></h1>\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div *ngIf = \"databool; else nodata\" class=\"container\">\n          <h1 class=\"col-lg-6\">Total Confirmed Cases: {{confirmed}}</h1>\n          <h1 class=\"col-lg-6\">Total Recovered Cases: {{recovered}}</h1>\n          <h1 class=\"col-lg-6\">Total Deaths: {{deaths}}</h1>\n      </div>\n    </mat-card-content>\n  </mat-card>\n  <ng-template #nodata>\n    <h1>No Data to Display for this Country!</h1>\n  </ng-template>\n</div>\n<app-footer></app-footer>","import { Component } from '@angular/core';\nimport {CovidService} from './services/covid.service'\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'websciquiz2ang';\n\n  countries:string\n  country:string\n  confirmed:Number\n  recovered:Number\n  deaths:Number\n  currentTime:Date\n  timeout:Number\n  databool:boolean\n  constructor(private covid:CovidService){}\n\n  ngOnInit(){\n    this.covid.getCountries().subscribe((data)=>{\n      //console.log(data);\n      var sortedData = data.sort((a, b) => (a.Country > b.Country) ? 1 : -1)\n      console.log(sortedData);\n      this.countries = sortedData;\n    })\n  }\n  getData(){\n    this.covid.getCovidData(this.country).subscribe((data)=>{\n      console.log(data);\n      var index = data.length - 1\n      if (data.length == 0){\n        alert(\"No Data on Inputted Country\");\n        this.databool = false;\n      }else{\n        this.databool = true;\n        this.confirmed = data[index].Confirmed\n        this.recovered = data[index].Recovered\n        this.deaths = data[index].Deaths\n        this.currentTime = data[index].Date\n      }\n    })\n  }\n  getCountry(country:string){\n    this.country = country\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule} from '@angular/common/http'\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatFormFieldModule} from '@angular/material/form-field';\nimport { MatSelectModule} from '@angular/material/select';\nimport { MatButtonModule} from '@angular/material/button';\nimport { MatCardModule} from '@angular/material/card';\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    FooterComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatCardModule,\n\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h3>COVID-19 TRACKING APP</h3>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h3>COVID-19 Tracker App by Tyler Green</h3>\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CovidService {\n\n  constructor(private http:HttpClient) { }\n\n  getCountries():Observable<any>{\n    return this.http.get(\"/countries\");\n\n\n  }\n//Tried to make an endpoint for this to connect to the backend, but it was confusing on how to pass the country \n//to the backend that is taken from the form input\n  getCovidData(country:string):Observable<any>{\n    console.log(country);\n    const url = \"https://api.covid19api.com/total/dayone/country/\" + country;\n    return this.http.get<any>(url);\n\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}